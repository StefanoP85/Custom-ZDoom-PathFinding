//==============================================================================
//
// Navigation mesh ZScript module for ZDoom.
//
//==============================================================================

// -----------------------------------------------------------------------------
// Data classes.
// -----------------------------------------------------------------------------

// Base class for NavMesh classes.
class TCustomNavMesh : Object abstract
{
}

// Class representing a line of the NavMesh.
class TNavLine : TCustomNavMesh
{
	short X1, Y1, X2, Y2;
	int Portal;
	short MapLinedef;
	short Flags;
}

// Class representing a polygon of the NavMesh.
class TNavPolygon : TCustomNavMesh
{
	short HeightFloor, HeightCeiling;
	int LineFirst, LineCount;
	short MapSector;
	short Flags;
}

// Class representing a node in the search algorithm.
class TNavNode : TCustomNavMesh
{
	bool Closed, Visited;
	int F, G, H;
	int LinePortal;
	int Parent;
	void Initialize()
	{
		Closed = false;
		Visited = false;
		F = 0;
		G = 0;
		H = 0;
		LinePortal = -1;
		Parent = -1;
	}
}

// Class representing a step in the route.
class TNavRoute : TCustomNavMesh
{
	int Polygon;
	int LinePortal;
	Vector3 Position;
}

// -----------------------------------------------------------------------------
// NavMesh reader.
// -----------------------------------------------------------------------------

// Simple lexer for the NavMesh files.
class TNavMeshReader : TCustomNavMesh
{
	String SourceCode;
	int SourceCodeLength;
	int Position;
	bool EOF()
	{
		return Position >= SourceCodeLength;
	}
	bool IsWhitespace(int Ch)
	{
		return (Ch == 9) || (Ch == 10) || (Ch == 13) || (Ch == 32);
	}
	String GetNextToken()
	{
		String Result = "";
		int Ch;
		[Ch, Position] = SourceCode.GetNextCodePoint(Position);
		// Skip comments.
		if (Ch == "#")
		{
			do
			{
				[Ch, Position] = SourceCode.GetNextCodePoint(Position);
			}
			while ((!EOF()) && (IsWhitespace(Ch)));
		}
		// Skip whitespaces.
		while ((!EOF()) && (IsWhitespace(Ch)))
			[Ch, Position] = SourceCode.GetNextCodePoint(Position);
		while ((!EOF()) && (!IsWhitespace(Ch)))
		{
			Result.AppendCharacter(Ch);
			[Ch, Position] = SourceCode.GetNextCodePoint(Position);
		}
		return Result;
	}
	static TNavMeshReader Create(String SourceCode)
	{
		TNavMeshReader Result = New('TNavMeshReader');
		Result.SourceCode = SourceCode;
		Result.SourceCodeLength = SourceCode.CodePointCount();
		Result.Position = 14;
		int Ch;
		[Ch, Result.Position] = Result.SourceCode.GetNextCodePoint(Result.Position);
		while ((Result.EOF()) && (Result.IsWhitespace(Ch)))
		{
			[Ch, Result.Position] = Result.SourceCode.GetNextCodePoint(Result.Position);
		}
		return Result;
	}
}

// -----------------------------------------------------------------------------
// NavMesh main class.
// -----------------------------------------------------------------------------

// Class representing a NavMesh.
class TNavMesh : TCustomNavMesh
{
	// Lines storage.
	int LineCount;
	Array<TNavLine> NavLines;
	// Polygons storage.
	int PolygonCount;
	Array<TNavPolygon> NavPolygons;
	// Cells space partitioning storage.
	int CellOffsetX;
	int CellOffsetY;
	int CellNumX;
	int CellNumY;
	Array<Int> Cells;
	Array<Int> CellsIndex;
	// Node list.
	Array<TNavNode> NavNodes;
	// Checks if a point is inside a convex polygon.
	bool PointInPolygon(Vector3 Point, int PolygonIndex)
	{
		TNavPolygon NavPolygon = NavPolygons[PolygonIndex];
		// Check if Z is inside polygon floor and ceiling heights.
		if ((Point.Z < NavPolygon.HeightFloor) || (Point.Z > NavPolygon.HeightCeiling))
			return false;
		// Keep track of cross product sign changes.
		int Positive = 0;
		int Negative = 0;
		int LineIndex = NavPolygon.LineFirst;
		for (int I = 0; I < NavPolygon.LineCount; I++)
		{
			// Check if Point is in the polygon.
			TNavLine NavLine = NavLines[LineIndex];
			if ((NavLine.X1 == Point.X) && (NavLine.Y1 == Point.Y))
				return true;
			int CrossProduct = (Point.X - NavLine.X1) * (NavLine.Y2 - NavLine.Y1) - (Point.Y - NavLine.Y1) * (NavLine.X2 - NavLine.X1);
			if (CrossProduct > 0)
				Positive++;
			if (CrossProduct < 0)
				Negative++;
			// If the sign changes, the point is outside.
			if ((Positive > 0) && (Negative > 0))
				return false;
			LineIndex++;
		}
		// The point is on same side of all polygon lines.
		return true;
	}
	// Searchs the polygon index in NavPolygons, that contains the given point; -1 if not found.
	int SearchPolygon(Vector3 Point)
	{
		// Use the cells partitioning system if available.
		int CellPointX = Point.X + 32768;
		int CellPointY = Point.Y + 32768;
		CellPointX = (CellPointX >> 8) - CellOffsetX;
		CellPointY = (CellPointY >> 8) - CellOffsetY;
		if ((CellPointX >= 0) && (CellPointX < CellNumX) && (CellPointY >= 0) && (CellPointY < CellNumY))
		{
			int CellIndex = CellPointY * CellNumX + CellPointX;
			int CurrentCellIndex = CellsIndex[CellIndex];
			int NextCellIndex = CellsIndex[CellIndex + 1];
			while (CurrentCellIndex < NextCellIndex)
			{
				int PolygonIndex = Cells[CurrentCellIndex];
				if (PointInPolygon(Point, PolygonIndex))
					return PolygonIndex;
				CurrentCellIndex++;
			}
			return -1;
		}
		// Search through all polygons.
		int LineIndex = 0;
		int PolygonIndex = 0;
		int CurrentPolygonLine = 0;
		bool NotFound = true;
		while ((NotFound) && (LineIndex < LineCount))
		{
			// Check if the point is inside the polygon.
			if (PointInPolygon(Point, PolygonIndex))
				return PolygonIndex;
			LineIndex++;
			CurrentPolygonLine++;
			if (CurrentPolygonLine >= NavPolygons[PolygonIndex].LineCount)
			{
				PolygonIndex++;
				CurrentPolygonLine = 0;
			}
		}
		return -1;
	}
	// Cheap distance calculation.
	int ApproxDistance(int X1, int Y1, int X2, int Y2)
	{
		return ((X1 - X2) ** 2) + ((Y1 - Y2) ** 2);
	}
	// Perform the A* algorythm.
	bool SearchRoute(int StartPolygon, int StopPolygon, in out Array<TNavRoute> Route)
	{
		// Safety check.
		Route.Clear();
		if ((StartPolygon < 0) || (StopPolygon < 0) ||(StartPolygon == StopPolygon))
			return false;
		int StopX = (NavLines[NavPolygons[StopPolygon].LineFirst].X1 + NavLines[NavPolygons[StopPolygon].LineFirst].X2) >> 1;
		int StopY = (NavLines[NavPolygons[StopPolygon].LineFirst].Y1 + NavLines[NavPolygons[StopPolygon].LineFirst].Y2) >> 1;
		// Initialize the open list and the closed list.
		Array<int> OpenList;
		int CurrentNode;
		int I, J, LineIndex, MinF, MinNode, NodeIndex, Portal;
		bool NotFound;
		// Reset the nodes.
		for (I = 0; I < NavNodes.Size(); I++)
			NavNodes[I].Initialize();
		// Put the starting node on the open list.
		OpenList.Push(StartPolygon);
		// While the open list is not empty.
		while (OpenList.Size() > 0)
		{
			// Find the node with the least f on the open list, call it "MinNode".
			MinNode = 0;
			MinF = NavNodes[OpenList[MinNode]].F;
			for (I = 1; I < OpenList.Size(); I++)
				if (MinF > NavNodes[OpenList[I]].F)
				{
					MinNode = I;
					MinF = NavNodes[OpenList[MinNode]].F;
				}
			// Pop "MinNode" off the open list.
			CurrentNode = OpenList[MinNode];
			OpenList.Delete(MinNode);
			//CurrentNode = OpenList[OpenList.Size() - 1];
			//OpenList.Pop();
			NavNodes[CurrentNode].Closed = true;
			// Generate "MinNode"'s successors.
			I = 0;
			LineIndex = NavPolygons[CurrentNode].LineFirst;
			while (I < NavPolygons[CurrentNode].LineCount)
			{
				// For each successor.
				//LineIndex = I + NavPolygons[CurrentNode.Polygon].LineFirst;
				Portal = NavLines[LineIndex].Portal;
				if (Portal >= 0)
				{
					// If successor is the goal, stop search.
					if (Portal == StopPolygon)
					{
						TNavRoute NavRoute = New('TNavRoute');
						NavRoute.Polygon = StopPolygon;
						NavRoute.LinePortal = LineIndex;
						NavRoute.Position.X = (NavLines[LineIndex].X1 + NavLines[LineIndex].X2) / 2;
						NavRoute.Position.Y = (NavLines[LineIndex].Y1 + NavLines[LineIndex].Y2) / 2;
						NavRoute.Position.Z = NavPolygons[StopPolygon].HeightFloor;
						Route.Push(NavRoute);
						NodeIndex = CurrentNode;
						while ((NodeIndex >= 0) && (NodeIndex != StartPolygon))
						{
							TNavRoute NavRoute = New('TNavRoute');
							NavRoute.Polygon = NodeIndex;
							NavRoute.LinePortal = NavNodes[NodeIndex].LinePortal;
							NavRoute.Position.X = (NavLines[NavNodes[NodeIndex].LinePortal].X1 + NavLines[NavNodes[NodeIndex].LinePortal].X2) >> 1;
							NavRoute.Position.Y = (NavLines[NavNodes[NodeIndex].LinePortal].Y1 + NavLines[NavNodes[NodeIndex].LinePortal].Y2) >> 1;
							NavRoute.Position.Z = NavPolygons[NodeIndex].HeightFloor;
							Route.Push(NavRoute);
							NodeIndex = NavNodes[NodeIndex].Parent;
						}
						return true;
					}
					// Else, compute both g and h for successor.
					NodeIndex = Portal;
					if (!NavNodes[NodeIndex].Closed)
						if ((!NavNodes[NodeIndex].Visited) || ((NavNodes[CurrentNode].G + 1) < NavNodes[NodeIndex].G))
						{
							NavNodes[NodeIndex].H = ApproxDistance(
								(NavLines[LineIndex].X1 + NavLines[LineIndex].X2) / 2,
								(NavLines[LineIndex].Y1 + NavLines[LineIndex].Y2) / 2,
								StopX,
								StopY
							);
							NavNodes[NodeIndex].G = NavNodes[CurrentNode].G + 1;
							NavNodes[NodeIndex].F = NavNodes[NodeIndex].G + NavNodes[NodeIndex].H;
							if (!NavNodes[NodeIndex].Visited)
								OpenList.Push(NodeIndex);
							NavNodes[NodeIndex].Parent = CurrentNode;
							NavNodes[NodeIndex].LinePortal = LineIndex;
							NavNodes[NodeIndex].Visited = true;
						}
				}
				I++;
				LineIndex++;
			}
		}
		return false;
	}
	// Update an existing path.
	bool UpdateRoute(int LastStopPolygon, int CurrentStopPolygon, in out Array<TNavRoute> Route)
	{
		// Trivial case.
		if (LastStopPolygon == CurrentStopPolygon)
			return true;
		// Search the neighbors of the last polygon.
		int I = 0;
		int LineIndex = NavPolygons[LastStopPolygon].LineFirst;
		while (I < NavPolygons[LastStopPolygon].LineCount)
		{
			if (NavLines[LineIndex].Portal == CurrentStopPolygon)
			{
				TNavRoute NavRoute = New('TNavRoute');
				NavRoute.Polygon = CurrentStopPolygon;
				NavRoute.LinePortal = LineIndex;
				NavRoute.Position.X = (NavLines[LineIndex].X1 + NavLines[LineIndex].X2) / 2;
				NavRoute.Position.Y = (NavLines[LineIndex].Y1 + NavLines[LineIndex].Y2) / 2;
				NavRoute.Position.Z = NavPolygons[CurrentStopPolygon].HeightFloor;
				Route.Insert(0, NavRoute);
				return true;
			}
			I++;
		}
		// A new route is needed.
		return false;
	}
	// Creates an instance of NavMesh.
	static TNavMesh Create(String MapName)
	{
		String LumpName = String.Format("navmeshes/%s.txt", MapName);
		int LumpNumber = Wads.CheckNumForFullName(LumpName);
		if (LumpNumber < 0)
			return null;
		String SourceCode = Wads.ReadLump(LumpNumber);
		// Check the header.
		if (!(SourceCode.Mid(0, 14) ~== "# ZDOOMNAVMESH"))
			return null;
		// Parse the source code.
		TNavMeshReader NavMeshLexer = TNavMeshReader.Create(SourceCode);
		TNavMesh Result = New('TNavMesh');
		while (!NavMeshLexer.EOF())
		{
			String Token = NavMeshLexer.GetNextToken();
			// Line command.
			if (Token ~== "L")
			{
				TNavLine NavLine = New('TNavLine');
				NavLine.X1 = NavMeshLexer.GetNextToken().ToInt();
				NavLine.Y1 = NavMeshLexer.GetNextToken().ToInt();
				NavLine.X2 = NavMeshLexer.GetNextToken().ToInt();
				NavLine.Y2 = NavMeshLexer.GetNextToken().ToInt();
				NavLine.Portal = NavMeshLexer.GetNextToken().ToInt();
				NavLine.MapLinedef = NavMeshLexer.GetNextToken().ToInt();
				NavLine.Flags = NavMeshLexer.GetNextToken().ToInt();
				Result.NavLines.Push(NavLine);
				Result.LineCount++;
			}
			// Polygon command.
			if (Token ~== "P")
			{
				TNavPolygon NavPolygon = New('TNavPolygon');
				NavPolygon.HeightFloor = NavMeshLexer.GetNextToken().ToInt();
				NavPolygon.HeightCeiling = NavMeshLexer.GetNextToken().ToInt();
				NavPolygon.LineFirst = NavMeshLexer.GetNextToken().ToInt();
				NavPolygon.LineCount = NavMeshLexer.GetNextToken().ToInt();
				NavPolygon.MapSector = NavMeshLexer.GetNextToken().ToInt();
				NavPolygon.Flags = NavMeshLexer.GetNextToken().ToInt();
				Result.NavPolygons.Push(NavPolygon);
				Result.PolygonCount++;
			}
			// Cells origin and size command.
			if (Token ~== "O")
			{
				Result.CellOffsetX = NavMeshLexer.GetNextToken().ToInt();
				Result.CellOffsetY = NavMeshLexer.GetNextToken().ToInt();
				Result.CellNumX = NavMeshLexer.GetNextToken().ToInt();
				Result.CellNumY = NavMeshLexer.GetNextToken().ToInt();
				// Cells polygons command.
				int CurrentCell = 0;
				int CurrentCellIndex = 0;
				while (!NavMeshLexer.EOF())
				{
					Token = NavMeshLexer.GetNextToken();
					if (Token ~== "C")
					{
						int CellNumber = NavMeshLexer.GetNextToken().ToInt();
						// Cells indexes management.
						while (CurrentCellIndex <= CellNumber)
						{
							Result.CellsIndex.Push(CurrentCell);
							CurrentCellIndex++;
						}
					}
					else
					{
						Result.Cells.Push(Token.ToInt());
						CurrentCell++;
					}
				}
				// Add last cell index.
				Result.CellsIndex.Push(CurrentCell);
			}
		}
		// Build the node list.
		for (int I = 0; I < Result.NavPolygons.Size(); I++)
		{
			TNavNode NavNode = New('TNavNode');
			NavNode.Initialize();
			Result.NavNodes.Push(NavNode);
		}
		return Result;
	}
}

// -----------------------------------------------------------------------------
// NavMesh level handler.
// -----------------------------------------------------------------------------

// Level handler, that instantiates the NavMesh.
class TNavMeshHandler : EventHandler
{
	TNavMesh NavMesh;
    override void WorldLoaded(WorldEvent E)
	{
		NavMesh = TNavMesh.Create(Level.MapName);
	}
}

// -----------------------------------------------------------------------------
// NavMesh base Actor.
// -----------------------------------------------------------------------------
class TCustomNavMeshActor : KAI_Actor abstract
{
	TNavMesh NavMesh;
	// true if the route is valid.
	bool RouteActive;
	// The Route is simply an array of points.
	Array<TNavRoute> Route;
	int RouteStep;
	// The last polygon of the self Actor.
	int  RouteLastSelfPolygon;
	// The last polygon of the Target Actor.
	int  RouteLastTargetPolygon;
	// Route management functions.
	void RouteBegin()
	{
		RouteActive = true;
		RouteStep = Route.Size() - 1;
	}
	void RouteEnd()
	{
		Route.Clear();
		RouteActive = false;
	}
	bool RouteSearch(Vector3 Destination)
	{
		int CurrentSelfPolygon = NavMesh.SearchPolygon(Pos);
		int CurrentTargetPolygon = NavMesh.SearchPolygon(Destination);
		if ((CurrentSelfPolygon >= 0) && (CurrentTargetPolygon >= 0))// && (CurrentSelfPolygon != CurrentTargetPolygon))
		{
			RouteLastSelfPolygon = CurrentSelfPolygon;
			RouteLastTargetPolygon = CurrentTargetPolygon;
			if (NavMesh.SearchRoute(CurrentSelfPolygon, CurrentTargetPolygon, Route))
				return true;
			else
				return false;
		}
		return false;
	}
	void RouteChase(Vector3 Destination)
	{
		// Update the current position.
		int CurrentSelfPolygon = NavMesh.SearchPolygon(Pos);
		if (CurrentSelfPolygon == Route[RouteStep].Polygon)
		{
			if (RouteStep > 0)
				RouteStep--;
			else
			{
				// A new route is needed.
				RouteEnd();
				return;
			}
		}
		// Check if the target has moved.
		int CurrentTargetPolygon = NavMesh.SearchPolygon(Destination);
		if (CurrentTargetPolygon < 0)
		{
			// No route!
			RouteEnd();
			return;
		}
		if (CurrentTargetPolygon != RouteLastTargetPolygon)
		{
			// Checks if the target has moved slightly.
			if (NavMesh.UpdateRoute(RouteLastTargetPolygon, CurrentTargetPolygon, Route))
			{
				RouteLastTargetPolygon = CurrentTargetPolygon;
				RouteStep++;
			}
			else
			{
				// A new route is needed.
				RouteEnd();
				return;
			}
		}
		// Move towards the current destination.
		Vector3 Destination = Route[RouteStep].Position;
		KAI_MoveTowards(Route[RouteStep].Position, 0);
	}
	void SightChase()
	{
		int ChaseFlags = 0;
		KAI_Chase_PreChecks(ChaseFlags);
		KAI_Chase_FriendsAttackPlayerEnemies(ChaseFlags);
		KAI_Chase_Retarget(ChaseFlags, true);
		KAI_Chase_HandleActiveSound(ChaseFlags);
		KAI_Chase_HandleStrafing(Target, ChaseFlags);
		KAI_Chase_PatrolHandling();
		KAI_MoveTowards(Target.Pos);
		ShouldAttack();
	}
	void A_CustomChase()
	{
		if (Target)
		{
			if (CheckSight(Target))
			{
				if (RouteActive)
					RouteEnd();
				SightChase();
			}
			else
			{
				if (RouteActive)
					RouteChase(Target.Pos);
				else
				{
					if (RouteSearch(Target.Pos))
					{
						RouteBegin();
						RouteChase(Target.Pos);
					}
					else
						KAI_MoveTowards(Target.Pos);
				}
			}
		}
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		let NavMeshHandler = TNavMeshHandler(EventHandler.Find('TNavMeshHandler'));
		if (NavMeshHandler)
			NavMesh = NavMeshHandler.NavMesh;
		else
			NavMesh = null;
	}
}
